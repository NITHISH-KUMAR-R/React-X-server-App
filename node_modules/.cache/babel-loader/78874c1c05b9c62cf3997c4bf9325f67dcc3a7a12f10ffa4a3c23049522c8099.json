{"ast":null,"code":"var _jsxFileName = \"D:\\\\Node_jsProject\\\\react-client\\\\src\\\\Component\\\\About.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Card from './Card';\nimport './Timeline.css';\nimport Navbar from './Navbar';\nimport './About.css';\nimport { baseurl } from '../url';\nimport axiosInstance from '../axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst About = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [username, setUsername] = useState('');\n\n  // Fetch user posts\n  useEffect(() => {\n    const fetchUserPosts = async () => {\n      try {\n        const response = await axiosInstance.get(`${baseurl}/msg/all`, {\n          withCredentials: true // Ensure credentials are included\n        });\n        setUsername(response.data.username);\n\n        // Check if messagesList exists in response.data and is an array\n        if (response.data && Array.isArray(response.data.messagesList)) {\n          setPosts(response.data.messagesList || []);\n        } else {\n          console.error('Error: messagesList is not an array in response data');\n        }\n      } catch (error) {\n        console.error('Error while fetching posts', error);\n      }\n    };\n    fetchUserPosts();\n  }, []); // Empty dependency array ensures useEffect runs only once\n\n  // Function to like a post\n  const likePost = async postId => {\n    try {\n      const response = await axiosInstance.post(`${baseurl}/heart/like/${postId}`);\n      console.log(`Liked post with ID: ${postId}`, response);\n\n      // Update the local state to reflect the new like count\n      setPosts(prevPosts => prevPosts.map(post => post._id === postId ? {\n        ...post,\n        likes: post.likes + 1\n      } : post));\n    } catch (error) {\n      console.error(`Error liking post with ID: ${postId}`, error);\n    }\n  };\n\n  // Function to dislike a post\n  const dislikePost = async postId => {\n    try {\n      const response = await axiosInstance.post(`${baseurl}/heart/dislike/${postId}`);\n      console.log(`Disliked post with ID: ${postId}`, response);\n\n      // Update the local state to reflect the new dislike count\n      setPosts(prevPosts => prevPosts.map(post => post._id === postId ? {\n        ...post,\n        disLikes: post.disLikes + 1\n      } : post));\n    } catch (error) {\n      console.error(`Error disliking post with ID: ${postId}`, error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"about-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"about-title\",\n      children: [\"Login: \", username.toUpperCase()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Card, {\n        username: username.toUpperCase(),\n        // Assuming _id is a unique identifier for each post\n        userPost: post.userPost // Assuming userPost is the main content of the post\n        ,\n        likes: post.likes,\n        disLikes: post.disLikes,\n        date: post.date,\n        onLike: () => likePost(post._id) // Pass the likePost function with the postId\n        ,\n        onDislike: () => dislikePost(post._id) // Pass the dislikePost function with the postId\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 9\n  }, this);\n};\n_s(About, \"eJc9pa762mFJ1UHyrLjdvpLiRy8=\");\n_c = About;\nexport default About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useEffect","useState","Card","Navbar","baseurl","axiosInstance","jsxDEV","_jsxDEV","About","_s","posts","setPosts","username","setUsername","fetchUserPosts","response","get","withCredentials","data","Array","isArray","messagesList","console","error","likePost","postId","post","log","prevPosts","map","_id","likes","dislikePost","disLikes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","userPost","date","onLike","onDislike","_c","$RefreshReg$"],"sources":["D:/Node_jsProject/react-client/src/Component/About.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Card from './Card';\r\nimport './Timeline.css';\r\nimport Navbar from './Navbar';\r\nimport './About.css';\r\nimport { baseurl } from '../url';\r\nimport axiosInstance from '../axiosConfig';\r\n\r\nconst About=() => {\r\n    const [posts, setPosts]=useState( [] );\r\n    const [username, setUsername]=useState( '' );\r\n\r\n    // Fetch user posts\r\n    useEffect( () => {\r\n        const fetchUserPosts=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/msg/all`, {\r\n                    withCredentials: true // Ensure credentials are included\r\n                } );\r\n\r\n                setUsername( response.data.username );\r\n\r\n                // Check if messagesList exists in response.data and is an array\r\n                if ( response.data&&Array.isArray( response.data.messagesList ) ) {\r\n                    setPosts( response.data.messagesList||[] );\r\n                } else {\r\n                    console.error( 'Error: messagesList is not an array in response data' );\r\n                }\r\n            } catch ( error ) {\r\n                console.error( 'Error while fetching posts', error );\r\n            }\r\n        };\r\n\r\n        fetchUserPosts();\r\n    }, [] ); // Empty dependency array ensures useEffect runs only once\r\n\r\n    // Function to like a post\r\n    const likePost=async ( postId ) => {\r\n        try {\r\n            const response=await axiosInstance.post( `${ baseurl }/heart/like/${ postId }` );\r\n            console.log( `Liked post with ID: ${ postId }`, response );\r\n\r\n            // Update the local state to reflect the new like count\r\n            setPosts( ( prevPosts ) =>\r\n                prevPosts.map( ( post ) =>\r\n                    post._id===postId? { ...post, likes: post.likes+1 }:post\r\n                )\r\n            );\r\n        } catch ( error ) {\r\n            console.error( `Error liking post with ID: ${ postId }`, error );\r\n        }\r\n    };\r\n\r\n    // Function to dislike a post\r\n    const dislikePost=async ( postId ) => {\r\n        try {\r\n            const response=await axiosInstance.post( `${ baseurl }/heart/dislike/${ postId }` );\r\n            console.log( `Disliked post with ID: ${ postId }`, response );\r\n\r\n            // Update the local state to reflect the new dislike count\r\n            setPosts( ( prevPosts ) =>\r\n                prevPosts.map( ( post ) =>\r\n                    post._id===postId? { ...post, disLikes: post.disLikes+1 }:post\r\n                )\r\n            );\r\n        } catch ( error ) {\r\n            console.error( `Error disliking post with ID: ${ postId }`, error );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"about-container\">\r\n            <Navbar />\r\n            <h1 className=\"about-title\">Login: {username.toUpperCase()}</h1>\r\n            <div className=\"cards-container\">\r\n                {posts.map( ( post ) => (\r\n                    <Card\r\n                        username={username.toUpperCase()}\r\n                        key={post._id} // Assuming _id is a unique identifier for each post\r\n                        userPost={post.userPost} // Assuming userPost is the main content of the post\r\n                        likes={post.likes}\r\n                        disLikes={post.disLikes}\r\n                        date={post.date}\r\n                        onLike={() => likePost( post._id )} // Pass the likePost function with the postId\r\n                        onDislike={() => dislikePost( post._id )} // Pass the dislikePost function with the postId\r\n                    />\r\n                ) )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,gBAAgB;AACvB,OAAOC,MAAM,MAAM,UAAU;AAC7B,OAAO,aAAa;AACpB,SAASC,OAAO,QAAQ,QAAQ;AAChC,OAAOC,aAAa,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,KAAK,GAACA,CAAA,KAAM;EAAAC,EAAA;EACd,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAACV,QAAQ,CAAE,EAAG,CAAC;EACtC,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAACZ,QAAQ,CAAE,EAAG,CAAC;;EAE5C;EACAD,SAAS,CAAE,MAAM;IACb,MAAMc,cAAc,GAAC,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAC,MAAMV,aAAa,CAACW,GAAG,CAAE,GAAIZ,OAAO,UAAW,EAAE;UAC5Da,eAAe,EAAE,IAAI,CAAC;QAC1B,CAAE,CAAC;QAEHJ,WAAW,CAAEE,QAAQ,CAACG,IAAI,CAACN,QAAS,CAAC;;QAErC;QACA,IAAKG,QAAQ,CAACG,IAAI,IAAEC,KAAK,CAACC,OAAO,CAAEL,QAAQ,CAACG,IAAI,CAACG,YAAa,CAAC,EAAG;UAC9DV,QAAQ,CAAEI,QAAQ,CAACG,IAAI,CAACG,YAAY,IAAE,EAAG,CAAC;QAC9C,CAAC,MAAM;UACHC,OAAO,CAACC,KAAK,CAAE,sDAAuD,CAAC;QAC3E;MACJ,CAAC,CAAC,OAAQA,KAAK,EAAG;QACdD,OAAO,CAACC,KAAK,CAAE,4BAA4B,EAAEA,KAAM,CAAC;MACxD;IACJ,CAAC;IAEDT,cAAc,CAAC,CAAC;EACpB,CAAC,EAAE,EAAG,CAAC,CAAC,CAAC;;EAET;EACA,MAAMU,QAAQ,GAAC,MAAQC,MAAM,IAAM;IAC/B,IAAI;MACA,MAAMV,QAAQ,GAAC,MAAMV,aAAa,CAACqB,IAAI,CAAE,GAAItB,OAAO,eAAiBqB,MAAM,EAAI,CAAC;MAChFH,OAAO,CAACK,GAAG,CAAE,uBAAwBF,MAAM,EAAG,EAAEV,QAAS,CAAC;;MAE1D;MACAJ,QAAQ,CAAIiB,SAAS,IACjBA,SAAS,CAACC,GAAG,CAAIH,IAAI,IACjBA,IAAI,CAACI,GAAG,KAAGL,MAAM,GAAE;QAAE,GAAGC,IAAI;QAAEK,KAAK,EAAEL,IAAI,CAACK,KAAK,GAAC;MAAE,CAAC,GAACL,IACxD,CACJ,CAAC;IACL,CAAC,CAAC,OAAQH,KAAK,EAAG;MACdD,OAAO,CAACC,KAAK,CAAE,8BAA+BE,MAAM,EAAG,EAAEF,KAAM,CAAC;IACpE;EACJ,CAAC;;EAED;EACA,MAAMS,WAAW,GAAC,MAAQP,MAAM,IAAM;IAClC,IAAI;MACA,MAAMV,QAAQ,GAAC,MAAMV,aAAa,CAACqB,IAAI,CAAE,GAAItB,OAAO,kBAAoBqB,MAAM,EAAI,CAAC;MACnFH,OAAO,CAACK,GAAG,CAAE,0BAA2BF,MAAM,EAAG,EAAEV,QAAS,CAAC;;MAE7D;MACAJ,QAAQ,CAAIiB,SAAS,IACjBA,SAAS,CAACC,GAAG,CAAIH,IAAI,IACjBA,IAAI,CAACI,GAAG,KAAGL,MAAM,GAAE;QAAE,GAAGC,IAAI;QAAEO,QAAQ,EAAEP,IAAI,CAACO,QAAQ,GAAC;MAAE,CAAC,GAACP,IAC9D,CACJ,CAAC;IACL,CAAC,CAAC,OAAQH,KAAK,EAAG;MACdD,OAAO,CAACC,KAAK,CAAE,iCAAkCE,MAAM,EAAG,EAAEF,KAAM,CAAC;IACvE;EACJ,CAAC;EAED,oBACIhB,OAAA;IAAK2B,SAAS,EAAC,iBAAiB;IAAAC,QAAA,gBAC5B5B,OAAA,CAACJ,MAAM;MAAAiC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACVhC,OAAA;MAAI2B,SAAS,EAAC,aAAa;MAAAC,QAAA,GAAC,SAAO,EAACvB,QAAQ,CAAC4B,WAAW,CAAC,CAAC;IAAA;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAChEhC,OAAA;MAAK2B,SAAS,EAAC,iBAAiB;MAAAC,QAAA,EAC3BzB,KAAK,CAACmB,GAAG,CAAIH,IAAI,iBACdnB,OAAA,CAACL,IAAI;QACDU,QAAQ,EAAEA,QAAQ,CAAC4B,WAAW,CAAC,CAAE;QAClB;QACfC,QAAQ,EAAEf,IAAI,CAACe,QAAS,CAAC;QAAA;QACzBV,KAAK,EAAEL,IAAI,CAACK,KAAM;QAClBE,QAAQ,EAAEP,IAAI,CAACO,QAAS;QACxBS,IAAI,EAAEhB,IAAI,CAACgB,IAAK;QAChBC,MAAM,EAAEA,CAAA,KAAMnB,QAAQ,CAAEE,IAAI,CAACI,GAAI,CAAE,CAAC;QAAA;QACpCc,SAAS,EAAEA,CAAA,KAAMZ,WAAW,CAAEN,IAAI,CAACI,GAAI,CAAE,CAAC;MAAA,GANrCJ,IAAI,CAACI,GAAG;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOhB,CACH;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC9B,EAAA,CAlFID,KAAK;AAAAqC,EAAA,GAALrC,KAAK;AAoFX,eAAeA,KAAK;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}