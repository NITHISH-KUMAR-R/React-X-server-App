{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nithi\\\\Downloads\\\\NewProjects\\\\react-client\\\\src\\\\Component\\\\FriendsPostonly.jsx\",\n  _s = $RefreshSig$();\n// src/Component/FriendPosts.js\nimport React, { useEffect, useState } from 'react';\nimport Card from './Card'; // Assuming you have a Card component for displaying posts\nimport axios from 'axios';\nimport './FriendPosts.css'; // Your CSS file for styling\nimport Navbar from './Navbar';\nimport { baseurl } from '../url';\nimport axiosInstance from '../axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\naxios.defaults.withCredentials = true;\nconst FriendPosts = () => {\n  _s();\n  const [friendPosts, setFriendPosts] = useState([]);\n  useEffect(() => {\n    const fetchFriendPosts = async () => {\n      try {\n        const response = await axiosInstance.get(`${baseurl}/msg/displayFrndPost`, {\n          withCredentials: true\n        });\n        setFriendPosts(response.data.friendPosts);\n      } catch (error) {\n        console.error('Error fetching friend posts:', error);\n      }\n    };\n    fetchFriendPosts();\n  }, []);\n  const formatDate = dateString => {\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    const date = new Date(dateString);\n    return date.toLocaleDateString(undefined, options);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this), friendPosts.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No friend posts available.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 17\n    }, this) : friendPosts.map(post => post.messagesList.map(message => /*#__PURE__*/_jsxDEV(Card, {\n      username: post.username.toUpperCase() // Assuming username is available in each post object\n      ,\n      userPost: message.userPost,\n      likes: message.likes,\n      disLikes: message.disLikes,\n      date: formatDate(message.date)\n    }, message._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 25\n    }, this)))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 9\n  }, this);\n};\n_s(FriendPosts, \"KDNomgki6e/bgpfk7S7Sz95xUAo=\");\n_c = FriendPosts;\nexport default FriendPosts;\nvar _c;\n$RefreshReg$(_c, \"FriendPosts\");","map":{"version":3,"names":["React","useEffect","useState","Card","axios","Navbar","baseurl","axiosInstance","jsxDEV","_jsxDEV","defaults","withCredentials","FriendPosts","_s","friendPosts","setFriendPosts","fetchFriendPosts","response","get","data","error","console","formatDate","dateString","options","year","month","day","date","Date","toLocaleDateString","undefined","className","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","post","messagesList","message","username","toUpperCase","userPost","likes","disLikes","_id","_c","$RefreshReg$"],"sources":["C:/Users/nithi/Downloads/NewProjects/react-client/src/Component/FriendsPostonly.jsx"],"sourcesContent":["// src/Component/FriendPosts.js\r\nimport React, { useEffect, useState } from 'react';\r\nimport Card from './Card'; // Assuming you have a Card component for displaying posts\r\nimport axios from 'axios';\r\nimport './FriendPosts.css'; // Your CSS file for styling\r\nimport Navbar from './Navbar';\r\nimport { baseurl } from '../url';\r\nimport axiosInstance from '../axiosConfig';\r\n\r\naxios.defaults.withCredentials=true;\r\n\r\nconst FriendPosts=() => {\r\n    const [friendPosts, setFriendPosts]=useState( [] );\r\n\r\n    useEffect( () => {\r\n        const fetchFriendPosts=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/msg/displayFrndPost`, {\r\n                    withCredentials: true\r\n                } );\r\n                setFriendPosts( response.data.friendPosts );\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching friend posts:', error );\r\n            }\r\n        };\r\n\r\n        fetchFriendPosts();\r\n    }, [] );\r\n\r\n    const formatDate=( dateString ) => {\r\n        const options={ year: 'numeric', month: 'long', day: 'numeric' };\r\n        const date=new Date( dateString );\r\n        return date.toLocaleDateString( undefined, options );\r\n    };\r\n\r\n    return (\r\n        <div className='card-container'>\r\n            <Navbar />\r\n\r\n            {friendPosts.length===0? (\r\n                <p>No friend posts available.</p>\r\n            ):(\r\n                friendPosts.map( post => (\r\n                    post.messagesList.map( message => (\r\n                        <Card\r\n                            key={message._id}\r\n                            username={post.username.toUpperCase()} // Assuming username is available in each post object\r\n                            userPost={message.userPost}\r\n                            likes={message.likes}\r\n                            disLikes={message.disLikes}\r\n                            date={formatDate( message.date )}\r\n                        />\r\n                    ) )\r\n                ) )\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendPosts;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,QAAQ,CAAC,CAAC;AAC3B,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,mBAAmB,CAAC,CAAC;AAC5B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,OAAO,QAAQ,QAAQ;AAChC,OAAOC,aAAa,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3CL,KAAK,CAACM,QAAQ,CAACC,eAAe,GAAC,IAAI;AAEnC,MAAMC,WAAW,GAACA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAACb,QAAQ,CAAE,EAAG,CAAC;EAElDD,SAAS,CAAE,MAAM;IACb,MAAMe,gBAAgB,GAAC,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAMC,QAAQ,GAAC,MAAMV,aAAa,CAACW,GAAG,CAAG,GAAGZ,OAAS,sBAAqB,EAAE;UACxEK,eAAe,EAAE;QACrB,CAAE,CAAC;QACHI,cAAc,CAAEE,QAAQ,CAACE,IAAI,CAACL,WAAY,CAAC;MAC/C,CAAC,CAAC,OAAQM,KAAK,EAAG;QACdC,OAAO,CAACD,KAAK,CAAE,8BAA8B,EAAEA,KAAM,CAAC;MAC1D;IACJ,CAAC;IAEDJ,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAG,CAAC;EAEP,MAAMM,UAAU,GAAGC,UAAU,IAAM;IAC/B,MAAMC,OAAO,GAAC;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE,MAAM;MAAEC,GAAG,EAAE;IAAU,CAAC;IAChE,MAAMC,IAAI,GAAC,IAAIC,IAAI,CAAEN,UAAW,CAAC;IACjC,OAAOK,IAAI,CAACE,kBAAkB,CAAEC,SAAS,EAAEP,OAAQ,CAAC;EACxD,CAAC;EAED,oBACIf,OAAA;IAAKuB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3BxB,OAAA,CAACJ,MAAM;MAAA6B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,EAETvB,WAAW,CAACwB,MAAM,KAAG,CAAC,gBACnB7B,OAAA;MAAAwB,QAAA,EAAG;IAA0B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAAC,GAEjCvB,WAAW,CAACyB,GAAG,CAAEC,IAAI,IACjBA,IAAI,CAACC,YAAY,CAACF,GAAG,CAAEG,OAAO,iBAC1BjC,OAAA,CAACN,IAAI;MAEDwC,QAAQ,EAAEH,IAAI,CAACG,QAAQ,CAACC,WAAW,CAAC,CAAE,CAAC;MAAA;MACvCC,QAAQ,EAAEH,OAAO,CAACG,QAAS;MAC3BC,KAAK,EAAEJ,OAAO,CAACI,KAAM;MACrBC,QAAQ,EAAEL,OAAO,CAACK,QAAS;MAC3BnB,IAAI,EAAEN,UAAU,CAAEoB,OAAO,CAACd,IAAK;IAAE,GAL5Bc,OAAO,CAACM,GAAG;MAAAd,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMnB,CACH,CACJ,CACL;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACA,CAAC;AAEd,CAAC;AAACxB,EAAA,CA9CID,WAAW;AAAAqC,EAAA,GAAXrC,WAAW;AAgDjB,eAAeA,WAAW;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}