{"ast":null,"code":"var _jsxFileName = \"D:\\\\Node_jsProject\\\\react-client\\\\src\\\\Component\\\\About.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Card from './Card';\nimport './Timeline.css';\nimport Navbar from './Navbar';\nimport './About.css';\nimport { baseurl } from '../url';\nimport axiosInstance from '../axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst About = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [username, setUsername] = useState('');\n  useEffect(() => {\n    const fetchUserPosts = async () => {\n      try {\n        const response = await axiosInstance.get(`${baseurl}/msg/all`, {\n          withCredentials: true // Ensure credentials are included\n        });\n        response.data.messagesList.forEach(message => {\n          console.log(message._id);\n        });\n        setUsername(response.data.username);\n\n        // Check if messagesList exists in response.data and is an array\n        if (response.data && Array.isArray(response.data.messagesList)) {\n          setPosts(response.data.messagesList || []);\n        } else {\n          console.error('Error: messagesList is not an array in response data');\n        }\n      } catch (error) {\n        console.error('Error while fetching posts', error);\n      }\n    };\n    fetchUserPosts();\n  }, []); // Empty dependency array ensures useEffect runs only once\n\n  useEffect(() => {\n    const fetchLikes = async () => {\n      try {\n        const response = await axiosInstance.get(`${baseurl}/heart/likes/66877ff7e9af014cb14f6a8e`);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"about-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"about-title\",\n      children: [\"Login: \", username.toUpperCase()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"cards-container\",\n      children: posts.map(post => /*#__PURE__*/_jsxDEV(Card, {\n        username: username.toUpperCase(),\n        // Assuming _id is a unique identifier for each post\n        userPost: post.userPost // Assuming userPost is the main content of the post\n        ,\n        likes: post.likes,\n        disLikes: post.disLikes,\n        date: post.date\n      }, post._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this);\n};\n_s(About, \"IkBsrhN5YWeTtJc6Nk2L3cV2Nqw=\");\n_c = About;\nexport default About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useEffect","useState","Card","Navbar","baseurl","axiosInstance","jsxDEV","_jsxDEV","About","_s","posts","setPosts","username","setUsername","fetchUserPosts","response","get","withCredentials","data","messagesList","forEach","message","console","log","_id","Array","isArray","error","fetchLikes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","toUpperCase","map","post","userPost","likes","disLikes","date","_c","$RefreshReg$"],"sources":["D:/Node_jsProject/react-client/src/Component/About.jsx"],"sourcesContent":["\r\nimport React, { useEffect, useState } from 'react';\r\nimport Card from './Card';\r\nimport './Timeline.css';\r\nimport Navbar from './Navbar';\r\nimport './About.css'\r\nimport { baseurl } from '../url';\r\nimport axiosInstance from '../axiosConfig';\r\n\r\n\r\nconst About=() => {\r\n    const [posts, setPosts]=useState( [] );\r\n    const [username, setUsername]=useState( '' );\r\n\r\n    useEffect( () => {\r\n        const fetchUserPosts=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/msg/all`, {\r\n                    withCredentials: true // Ensure credentials are included\r\n                } );\r\n                response.data.messagesList.forEach( message => {\r\n                    console.log( message._id );\r\n                } );\r\n\r\n                setUsername( response.data.username )\r\n\r\n                // Check if messagesList exists in response.data and is an array\r\n                if ( response.data&&Array.isArray( response.data.messagesList ) ) {\r\n                    setPosts( response.data.messagesList||[] );\r\n                } else {\r\n                    console.error( 'Error: messagesList is not an array in response data' );\r\n                }\r\n            } catch ( error ) {\r\n                console.error( 'Error while fetching posts', error );\r\n            }\r\n        };\r\n\r\n        fetchUserPosts();\r\n    }, [] ); // Empty dependency array ensures useEffect runs only once\r\n\r\n    useEffect( () => {\r\n        const fetchLikes=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/heart/likes/66877ff7e9af014cb14f6a8e` )\r\n\r\n            } catch ( error ) {\r\n                console.error( error )\r\n            }\r\n        }\r\n    } )\r\n\r\n    return (\r\n        <div className=\"about-container\">\r\n            <Navbar />\r\n\r\n            <h1 className=\"about-title\">Login: {username.toUpperCase()}</h1>\r\n            <div className=\"cards-container\">\r\n                {posts.map( post => (\r\n                    <Card\r\n                        username={username.toUpperCase()}\r\n                        key={post._id} // Assuming _id is a unique identifier for each post\r\n                        userPost={post.userPost} // Assuming userPost is the main content of the post\r\n                        likes={post.likes}\r\n                        disLikes={post.disLikes}\r\n                        date={post.date}\r\n                    />\r\n                ) )}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}