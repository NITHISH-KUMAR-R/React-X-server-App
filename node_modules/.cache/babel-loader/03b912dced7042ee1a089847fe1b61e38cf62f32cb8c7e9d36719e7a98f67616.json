{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nithi\\\\Downloads\\\\NewProjects\\\\react-client\\\\src\\\\Component\\\\Friend.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './Friend.css';\nimport Friend2 from './Friend2';\nimport Navbar from './Navbar';\nimport { baseurl } from '../url';\nimport axiosInstance from '../axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FriendComponent = () => {\n  _s();\n  const [session, setSession] = useState(null); // Use null for initial state\n  const [allUsers, setAllUsers] = useState([]); // To store all users\n  const [receivedRequests, setReceivedRequests] = useState([]); // To store received friend requests\n  const [sentRequests, setSentRequests] = useState(new Set()); // To track sent friend requests\n  const [pending, setPendingRequest] = useState([]);\n  const [loading, setLoading] = useState(true); // To manage loading state\n\n  useEffect(() => {\n    const fetchPendingRequests = async () => {\n      try {\n        if (session) {\n          const response = await axiosInstance.get(`${baseurl}/friend/pendingRequests`, {\n            withCredentials: true\n          });\n          const {\n            sentRequests,\n            receivedRequests\n          } = response.data;\n          console.log('Pending Requests:', {\n            sentRequests,\n            receivedRequests\n          });\n\n          // Store received requests in localStorage\n          localStorage.setItem('receivedRequests', JSON.stringify(receivedRequests));\n\n          // Update state\n          setReceivedRequests(receivedRequests);\n          const sentRequestIds = new Set(sentRequests.map(request => request.receiver._id));\n          setSentRequests(sentRequestIds);\n        }\n      } catch (error) {\n        console.error('Error fetching pending friend requests:', error);\n      }\n    };\n    fetchPendingRequests();\n  }, [session]);\n  useEffect(() => {\n    const fetchLoginUserId = async () => {\n      try {\n        const response = await axiosInstance.get(`${baseurl}/user/session`, {\n          withCredentials: true // Include credentials in the request\n        });\n        const data = response.data;\n        console.log(data);\n        setSession(data);\n      } catch (error) {\n        console.error('Error fetching session data:', error);\n      }\n    };\n    fetchLoginUserId();\n  }, []);\n  useEffect(() => {\n    const fetchAllUsers = async () => {\n      try {\n        const response = await axiosInstance.get(`${baseurl}/friend/unkownuser`, {\n          withCredentials: true // Include credentials in the request\n        });\n        const allUserData = response.data;\n        console.log(allUserData);\n        setAllUsers(allUserData);\n        setLoading(false);\n      } catch (error) {\n        console.error('Error fetching all users:', error);\n        setLoading(false);\n      }\n    };\n    fetchAllUsers();\n  }, []);\n  useEffect(() => {\n    const fetchReceivedRequests = async () => {\n      try {\n        if (session) {\n          const response = await axiosInstance.get(`${baseurl}/friend/recievedReq`, {\n            withCredentials: true\n          });\n          const requests = response.data;\n          console.log('Received Requests:', requests);\n\n          // Store received requests in localStorage\n          localStorage.setItem('receivedRequests', JSON.stringify(requests));\n\n          // Update received requests state\n          setReceivedRequests(requests);\n        }\n      } catch (error) {\n        console.error('Error fetching received friend requests:', error);\n      }\n    };\n    fetchReceivedRequests();\n  }, [session]);\n  const sendFriendRequest = async userId => {\n    try {\n      if (session) {\n        const response = await axiosInstance.post(`${baseurl}/friend/req/${userId}`, {}, {\n          withCredentials: true // Include credentials in the request\n        });\n        console.log('Friend request sent:', response.data);\n\n        // Update sentRequests state immediately after sending request\n        setSentRequests(prev => new Set(prev).add(userId));\n      } else {\n        console.error('User session not found');\n      }\n    } catch (error) {\n      console.error('Error sending friend request:', error);\n    }\n  };\n  const acceptFriendRequest = async requestId => {\n    try {\n      const response = await axiosInstance.post(`${baseurl}/friend/pending/${requestId}`, {}, {\n        withCredentials: true\n      });\n      console.log('Friend request accepted:', response.data);\n      // Remove the accepted request from the receivedRequests state\n      setReceivedRequests(prev => prev.filter(request => request._id !== requestId));\n      window.location.reload();\n    } catch (error) {\n      console.error('Error accepting friend request:', error);\n    }\n  };\n  useEffect(() => {\n    // Load received requests from localStorage if available\n    const storedRequests = localStorage.getItem('receivedRequests');\n    if (storedRequests) {\n      setReceivedRequests(JSON.parse(storedRequests));\n    }\n  }, []);\n  const capitalizeFirstLetter = string => {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"friend-container\",\n      children: [loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"spinner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 165,\n        columnNumber: 21\n      }, this) : session ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"welcome-message\",\n        children: /*#__PURE__*/_jsxDEV(Friend2, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 21\n      }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading session...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"all-users\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"All Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 174,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: allUsers.map(user => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [capitalizeFirstLetter(user.username), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"send-request-btn\",\n              onClick: () => sendFriendRequest(user._id),\n              disabled: sentRequests.has(user._id),\n              children: sentRequests.has(user._id) ? 'Req Sent' : 'Send Req'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 33\n            }, this)]\n          }, user._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 177,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 173,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"received-requests\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Received Friend Requests\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: receivedRequests.map(request => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"request-from\",\n              children: [\"Request from: \", request.senderName, \" (\", request.senderEmail, \")\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 195,\n              columnNumber: 33\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"accept-request-btn\",\n              onClick: () => acceptFriendRequest(request._id),\n              children: \"Accept Request\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 198,\n              columnNumber: 33\n            }, this)]\n          }, request._id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 194,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 161,\n    columnNumber: 9\n  }, this);\n};\n_s(FriendComponent, \"lQ8ot5tCOdjB90s/RWcDRG+WORA=\");\n_c = FriendComponent;\nexport default FriendComponent;\nvar _c;\n$RefreshReg$(_c, \"FriendComponent\");","map":{"version":3,"names":["React","useEffect","useState","Friend2","Navbar","baseurl","axiosInstance","jsxDEV","_jsxDEV","FriendComponent","_s","session","setSession","allUsers","setAllUsers","receivedRequests","setReceivedRequests","sentRequests","setSentRequests","Set","pending","setPendingRequest","loading","setLoading","fetchPendingRequests","response","get","withCredentials","data","console","log","localStorage","setItem","JSON","stringify","sentRequestIds","map","request","receiver","_id","error","fetchLoginUserId","fetchAllUsers","allUserData","fetchReceivedRequests","requests","sendFriendRequest","userId","post","prev","add","acceptFriendRequest","requestId","filter","window","location","reload","storedRequests","getItem","parse","capitalizeFirstLetter","string","charAt","toUpperCase","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","user","username","onClick","disabled","has","senderName","senderEmail","_c","$RefreshReg$"],"sources":["C:/Users/nithi/Downloads/NewProjects/react-client/src/Component/Friend.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Friend.css';\r\nimport Friend2 from './Friend2';\r\nimport Navbar from './Navbar';\r\nimport { baseurl } from '../url';\r\nimport axiosInstance from '../axiosConfig';\r\n\r\nconst FriendComponent=() => {\r\n    const [session, setSession]=useState( null ); // Use null for initial state\r\n    const [allUsers, setAllUsers]=useState( [] ); // To store all users\r\n    const [receivedRequests, setReceivedRequests]=useState( [] ); // To store received friend requests\r\n    const [sentRequests, setSentRequests]=useState( new Set() ); // To track sent friend requests\r\n    const [pending, setPendingRequest]=useState( [] )\r\n    const [loading, setLoading]=useState( true ); // To manage loading state\r\n\r\n\r\n    useEffect( () => {\r\n        const fetchPendingRequests=async () => {\r\n            try {\r\n                if ( session ) {\r\n                    const response=await axiosInstance.get( `${ baseurl }/friend/pendingRequests`, {\r\n                        withCredentials: true,\r\n                    } );\r\n                    const { sentRequests, receivedRequests }=response.data;\r\n                    console.log( 'Pending Requests:', { sentRequests, receivedRequests } );\r\n\r\n                    // Store received requests in localStorage\r\n                    localStorage.setItem( 'receivedRequests', JSON.stringify( receivedRequests ) );\r\n\r\n                    // Update state\r\n                    setReceivedRequests( receivedRequests );\r\n                    const sentRequestIds=new Set( sentRequests.map( request => request.receiver._id ) );\r\n                    setSentRequests( sentRequestIds );\r\n                }\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching pending friend requests:', error );\r\n            }\r\n        };\r\n\r\n        fetchPendingRequests();\r\n    }, [session] );\r\n\r\n\r\n\r\n\r\n\r\n    useEffect( () => {\r\n        const fetchLoginUserId=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/user/session`, {\r\n                    withCredentials: true, // Include credentials in the request\r\n                } );\r\n                const data=response.data;\r\n                console.log( data );\r\n                setSession( data );\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching session data:', error );\r\n            }\r\n        };\r\n\r\n        fetchLoginUserId();\r\n    }, [] );\r\n\r\n    useEffect( () => {\r\n        const fetchAllUsers=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/friend/unkownuser`, {\r\n                    withCredentials: true, // Include credentials in the request\r\n                } );\r\n                const allUserData=response.data;\r\n                console.log( allUserData );\r\n                setAllUsers( allUserData );\r\n                setLoading( false );\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching all users:', error );\r\n                setLoading( false );\r\n            }\r\n        };\r\n\r\n        fetchAllUsers();\r\n    }, [] );\r\n\r\n    useEffect( () => {\r\n        const fetchReceivedRequests=async () => {\r\n            try {\r\n                if ( session ) {\r\n                    const response=await axiosInstance.get( `${ baseurl }/friend/recievedReq`, {\r\n                        withCredentials: true,\r\n                    } );\r\n                    const requests=response.data;\r\n                    console.log( 'Received Requests:', requests );\r\n\r\n                    // Store received requests in localStorage\r\n                    localStorage.setItem( 'receivedRequests', JSON.stringify( requests ) );\r\n\r\n                    // Update received requests state\r\n                    setReceivedRequests( requests );\r\n                }\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching received friend requests:', error );\r\n            }\r\n        };\r\n\r\n        fetchReceivedRequests();\r\n    }, [session] );\r\n\r\n    const sendFriendRequest=async ( userId ) => {\r\n        try {\r\n            if ( session ) {\r\n                const response=await axiosInstance.post(\r\n                    `${ baseurl }/friend/req/${ userId }`,\r\n                    {},\r\n                    {\r\n                        withCredentials: true, // Include credentials in the request\r\n                    }\r\n                );\r\n                console.log( 'Friend request sent:', response.data );\r\n\r\n                // Update sentRequests state immediately after sending request\r\n                setSentRequests( ( prev ) => new Set( prev ).add( userId ) );\r\n            } else {\r\n                console.error( 'User session not found' );\r\n            }\r\n        } catch ( error ) {\r\n            console.error( 'Error sending friend request:', error );\r\n        }\r\n    };\r\n\r\n    const acceptFriendRequest=async ( requestId ) => {\r\n        try {\r\n            const response=await axiosInstance.post(\r\n                `${ baseurl }/friend/pending/${ requestId }`,\r\n                {},\r\n                {\r\n                    withCredentials: true,\r\n                }\r\n            );\r\n            console.log( 'Friend request accepted:', response.data );\r\n            // Remove the accepted request from the receivedRequests state\r\n            setReceivedRequests( ( prev ) =>\r\n                prev.filter( ( request ) => request._id!==requestId )\r\n            );\r\n            window.location.reload();\r\n        } catch ( error ) {\r\n            console.error( 'Error accepting friend request:', error );\r\n        }\r\n    };\r\n\r\n    useEffect( () => {\r\n        // Load received requests from localStorage if available\r\n        const storedRequests=localStorage.getItem( 'receivedRequests' );\r\n        if ( storedRequests ) {\r\n            setReceivedRequests( JSON.parse( storedRequests ) );\r\n        }\r\n    }, [] );\r\n\r\n    const capitalizeFirstLetter=( string ) => {\r\n        return string.charAt( 0 ).toUpperCase()+string.slice( 1 );\r\n    };\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Navbar />\r\n            <div className=\"friend-container\">\r\n                {loading? (\r\n                    <div className=\"spinner\"></div>\r\n                ):session? (\r\n                    <div className=\"welcome-message\">\r\n                        <Friend2 />\r\n                    </div>\r\n                ):(\r\n                    <p>Loading session...</p>\r\n                )}\r\n                <div className=\"all-users\">\r\n                    <h2>All Users</h2>\r\n                    <ul>\r\n                        {allUsers.map( ( user ) => (\r\n                            <li key={user._id}>\r\n                                {capitalizeFirstLetter( user.username )}\r\n                                <button\r\n                                    className=\"send-request-btn\"\r\n                                    onClick={() => sendFriendRequest( user._id )}\r\n                                    disabled={sentRequests.has( user._id )}\r\n                                >\r\n                                    {sentRequests.has( user._id )? 'Req Sent':'Send Req'}\r\n                                </button>\r\n                            </li>\r\n                        ) )}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"received-requests\">\r\n                    <h2>Received Friend Requests</h2>\r\n                    <ul>\r\n                        {receivedRequests.map( ( request ) => (\r\n                            <li key={request._id}>\r\n                                <span className=\"request-from\">\r\n                                    Request from: {request.senderName} ({request.senderEmail})\r\n                                </span>\r\n                                <button\r\n                                    className=\"accept-request-btn\"\r\n                                    onClick={() => acceptFriendRequest( request._id )}\r\n                                >\r\n                                    Accept Request\r\n                                </button>\r\n                            </li>\r\n                        ) )}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAO,cAAc;AACrB,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,MAAM,MAAM,UAAU;AAC7B,SAASC,OAAO,QAAQ,QAAQ;AAChC,OAAOC,aAAa,MAAM,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE3C,MAAMC,eAAe,GAACA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAACV,QAAQ,CAAE,IAAK,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACW,QAAQ,EAAEC,WAAW,CAAC,GAACZ,QAAQ,CAAE,EAAG,CAAC,CAAC,CAAC;EAC9C,MAAM,CAACa,gBAAgB,EAAEC,mBAAmB,CAAC,GAACd,QAAQ,CAAE,EAAG,CAAC,CAAC,CAAC;EAC9D,MAAM,CAACe,YAAY,EAAEC,eAAe,CAAC,GAAChB,QAAQ,CAAE,IAAIiB,GAAG,CAAC,CAAE,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACC,OAAO,EAAEC,iBAAiB,CAAC,GAACnB,QAAQ,CAAE,EAAG,CAAC;EACjD,MAAM,CAACoB,OAAO,EAAEC,UAAU,CAAC,GAACrB,QAAQ,CAAE,IAAK,CAAC,CAAC,CAAC;;EAG9CD,SAAS,CAAE,MAAM;IACb,MAAMuB,oBAAoB,GAAC,MAAAA,CAAA,KAAY;MACnC,IAAI;QACA,IAAKb,OAAO,EAAG;UACX,MAAMc,QAAQ,GAAC,MAAMnB,aAAa,CAACoB,GAAG,CAAG,GAAGrB,OAAS,yBAAwB,EAAE;YAC3EsB,eAAe,EAAE;UACrB,CAAE,CAAC;UACH,MAAM;YAAEV,YAAY;YAAEF;UAAiB,CAAC,GAACU,QAAQ,CAACG,IAAI;UACtDC,OAAO,CAACC,GAAG,CAAE,mBAAmB,EAAE;YAAEb,YAAY;YAAEF;UAAiB,CAAE,CAAC;;UAEtE;UACAgB,YAAY,CAACC,OAAO,CAAE,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAAEnB,gBAAiB,CAAE,CAAC;;UAE9E;UACAC,mBAAmB,CAAED,gBAAiB,CAAC;UACvC,MAAMoB,cAAc,GAAC,IAAIhB,GAAG,CAAEF,YAAY,CAACmB,GAAG,CAAEC,OAAO,IAAIA,OAAO,CAACC,QAAQ,CAACC,GAAI,CAAE,CAAC;UACnFrB,eAAe,CAAEiB,cAAe,CAAC;QACrC;MACJ,CAAC,CAAC,OAAQK,KAAK,EAAG;QACdX,OAAO,CAACW,KAAK,CAAE,yCAAyC,EAAEA,KAAM,CAAC;MACrE;IACJ,CAAC;IAEDhB,oBAAoB,CAAC,CAAC;EAC1B,CAAC,EAAE,CAACb,OAAO,CAAE,CAAC;EAMdV,SAAS,CAAE,MAAM;IACb,MAAMwC,gBAAgB,GAAC,MAAAA,CAAA,KAAY;MAC/B,IAAI;QACA,MAAMhB,QAAQ,GAAC,MAAMnB,aAAa,CAACoB,GAAG,CAAG,GAAGrB,OAAS,eAAc,EAAE;UACjEsB,eAAe,EAAE,IAAI,CAAE;QAC3B,CAAE,CAAC;QACH,MAAMC,IAAI,GAACH,QAAQ,CAACG,IAAI;QACxBC,OAAO,CAACC,GAAG,CAAEF,IAAK,CAAC;QACnBhB,UAAU,CAAEgB,IAAK,CAAC;MACtB,CAAC,CAAC,OAAQY,KAAK,EAAG;QACdX,OAAO,CAACW,KAAK,CAAE,8BAA8B,EAAEA,KAAM,CAAC;MAC1D;IACJ,CAAC;IAEDC,gBAAgB,CAAC,CAAC;EACtB,CAAC,EAAE,EAAG,CAAC;EAEPxC,SAAS,CAAE,MAAM;IACb,MAAMyC,aAAa,GAAC,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMjB,QAAQ,GAAC,MAAMnB,aAAa,CAACoB,GAAG,CAAG,GAAGrB,OAAS,oBAAmB,EAAE;UACtEsB,eAAe,EAAE,IAAI,CAAE;QAC3B,CAAE,CAAC;QACH,MAAMgB,WAAW,GAAClB,QAAQ,CAACG,IAAI;QAC/BC,OAAO,CAACC,GAAG,CAAEa,WAAY,CAAC;QAC1B7B,WAAW,CAAE6B,WAAY,CAAC;QAC1BpB,UAAU,CAAE,KAAM,CAAC;MACvB,CAAC,CAAC,OAAQiB,KAAK,EAAG;QACdX,OAAO,CAACW,KAAK,CAAE,2BAA2B,EAAEA,KAAM,CAAC;QACnDjB,UAAU,CAAE,KAAM,CAAC;MACvB;IACJ,CAAC;IAEDmB,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAG,CAAC;EAEPzC,SAAS,CAAE,MAAM;IACb,MAAM2C,qBAAqB,GAAC,MAAAA,CAAA,KAAY;MACpC,IAAI;QACA,IAAKjC,OAAO,EAAG;UACX,MAAMc,QAAQ,GAAC,MAAMnB,aAAa,CAACoB,GAAG,CAAG,GAAGrB,OAAS,qBAAoB,EAAE;YACvEsB,eAAe,EAAE;UACrB,CAAE,CAAC;UACH,MAAMkB,QAAQ,GAACpB,QAAQ,CAACG,IAAI;UAC5BC,OAAO,CAACC,GAAG,CAAE,oBAAoB,EAAEe,QAAS,CAAC;;UAE7C;UACAd,YAAY,CAACC,OAAO,CAAE,kBAAkB,EAAEC,IAAI,CAACC,SAAS,CAAEW,QAAS,CAAE,CAAC;;UAEtE;UACA7B,mBAAmB,CAAE6B,QAAS,CAAC;QACnC;MACJ,CAAC,CAAC,OAAQL,KAAK,EAAG;QACdX,OAAO,CAACW,KAAK,CAAE,0CAA0C,EAAEA,KAAM,CAAC;MACtE;IACJ,CAAC;IAEDI,qBAAqB,CAAC,CAAC;EAC3B,CAAC,EAAE,CAACjC,OAAO,CAAE,CAAC;EAEd,MAAMmC,iBAAiB,GAAC,MAAQC,MAAM,IAAM;IACxC,IAAI;MACA,IAAKpC,OAAO,EAAG;QACX,MAAMc,QAAQ,GAAC,MAAMnB,aAAa,CAAC0C,IAAI,CAClC,GAAG3C,OAAS,eAAe0C,MAAQ,EAAC,EACrC,CAAC,CAAC,EACF;UACIpB,eAAe,EAAE,IAAI,CAAE;QAC3B,CACJ,CAAC;QACDE,OAAO,CAACC,GAAG,CAAE,sBAAsB,EAAEL,QAAQ,CAACG,IAAK,CAAC;;QAEpD;QACAV,eAAe,CAAI+B,IAAI,IAAM,IAAI9B,GAAG,CAAE8B,IAAK,CAAC,CAACC,GAAG,CAAEH,MAAO,CAAE,CAAC;MAChE,CAAC,MAAM;QACHlB,OAAO,CAACW,KAAK,CAAE,wBAAyB,CAAC;MAC7C;IACJ,CAAC,CAAC,OAAQA,KAAK,EAAG;MACdX,OAAO,CAACW,KAAK,CAAE,+BAA+B,EAAEA,KAAM,CAAC;IAC3D;EACJ,CAAC;EAED,MAAMW,mBAAmB,GAAC,MAAQC,SAAS,IAAM;IAC7C,IAAI;MACA,MAAM3B,QAAQ,GAAC,MAAMnB,aAAa,CAAC0C,IAAI,CAClC,GAAG3C,OAAS,mBAAmB+C,SAAW,EAAC,EAC5C,CAAC,CAAC,EACF;QACIzB,eAAe,EAAE;MACrB,CACJ,CAAC;MACDE,OAAO,CAACC,GAAG,CAAE,0BAA0B,EAAEL,QAAQ,CAACG,IAAK,CAAC;MACxD;MACAZ,mBAAmB,CAAIiC,IAAI,IACvBA,IAAI,CAACI,MAAM,CAAIhB,OAAO,IAAMA,OAAO,CAACE,GAAG,KAAGa,SAAU,CACxD,CAAC;MACDE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAQhB,KAAK,EAAG;MACdX,OAAO,CAACW,KAAK,CAAE,iCAAiC,EAAEA,KAAM,CAAC;IAC7D;EACJ,CAAC;EAEDvC,SAAS,CAAE,MAAM;IACb;IACA,MAAMwD,cAAc,GAAC1B,YAAY,CAAC2B,OAAO,CAAE,kBAAmB,CAAC;IAC/D,IAAKD,cAAc,EAAG;MAClBzC,mBAAmB,CAAEiB,IAAI,CAAC0B,KAAK,CAAEF,cAAe,CAAE,CAAC;IACvD;EACJ,CAAC,EAAE,EAAG,CAAC;EAEP,MAAMG,qBAAqB,GAAGC,MAAM,IAAM;IACtC,OAAOA,MAAM,CAACC,MAAM,CAAE,CAAE,CAAC,CAACC,WAAW,CAAC,CAAC,GAACF,MAAM,CAACG,KAAK,CAAE,CAAE,CAAC;EAC7D,CAAC;EACD,oBACIxD,OAAA;IAAKyD,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3B1D,OAAA,CAACJ,MAAM;MAAA+D,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACV9D,OAAA;MAAKyD,SAAS,EAAC,kBAAkB;MAAAC,QAAA,GAC5B5C,OAAO,gBACJd,OAAA;QAAKyD,SAAS,EAAC;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC,GACjC3D,OAAO,gBACLH,OAAA;QAAKyD,SAAS,EAAC,iBAAiB;QAAAC,QAAA,eAC5B1D,OAAA,CAACL,OAAO;UAAAgE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACV,CAAC,gBAEN9D,OAAA;QAAA0D,QAAA,EAAG;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG,CAC3B,eACD9D,OAAA;QAAKyD,SAAS,EAAC,WAAW;QAAAC,QAAA,gBACtB1D,OAAA;UAAA0D,QAAA,EAAI;QAAS;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAClB9D,OAAA;UAAA0D,QAAA,EACKrD,QAAQ,CAACuB,GAAG,CAAImC,IAAI,iBACjB/D,OAAA;YAAA0D,QAAA,GACKN,qBAAqB,CAAEW,IAAI,CAACC,QAAS,CAAC,eACvChE,OAAA;cACIyD,SAAS,EAAC,kBAAkB;cAC5BQ,OAAO,EAAEA,CAAA,KAAM3B,iBAAiB,CAAEyB,IAAI,CAAChC,GAAI,CAAE;cAC7CmC,QAAQ,EAAEzD,YAAY,CAAC0D,GAAG,CAAEJ,IAAI,CAAChC,GAAI,CAAE;cAAA2B,QAAA,EAEtCjD,YAAY,CAAC0D,GAAG,CAAEJ,IAAI,CAAChC,GAAI,CAAC,GAAE,UAAU,GAAC;YAAU;cAAA4B,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAChD,CAAC;UAAA,GARJC,IAAI,CAAChC,GAAG;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OASb,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC,eACN9D,OAAA;QAAKyD,SAAS,EAAC,mBAAmB;QAAAC,QAAA,gBAC9B1D,OAAA;UAAA0D,QAAA,EAAI;QAAwB;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACjC9D,OAAA;UAAA0D,QAAA,EACKnD,gBAAgB,CAACqB,GAAG,CAAIC,OAAO,iBAC5B7B,OAAA;YAAA0D,QAAA,gBACI1D,OAAA;cAAMyD,SAAS,EAAC,cAAc;cAAAC,QAAA,GAAC,gBACb,EAAC7B,OAAO,CAACuC,UAAU,EAAC,IAAE,EAACvC,OAAO,CAACwC,WAAW,EAAC,GAC7D;YAAA;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAM,CAAC,eACP9D,OAAA;cACIyD,SAAS,EAAC,oBAAoB;cAC9BQ,OAAO,EAAEA,CAAA,KAAMtB,mBAAmB,CAAEd,OAAO,CAACE,GAAI,CAAE;cAAA2B,QAAA,EACrD;YAED;cAAAC,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC;UAAA,GATJjC,OAAO,CAACE,GAAG;YAAA4B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAUhB,CACN;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACH,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACJ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAAC5D,EAAA,CA3MID,eAAe;AAAAqE,EAAA,GAAfrE,eAAe;AA6MrB,eAAeA,eAAe;AAAC,IAAAqE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}