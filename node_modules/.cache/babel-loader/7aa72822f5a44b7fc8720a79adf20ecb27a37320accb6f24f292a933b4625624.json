{"ast":null,"code":"var _jsxFileName = \"D:\\\\May2024-projects\\\\react-client\\\\src\\\\Component\\\\Friend.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './Friend.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FriendComponent = () => {\n  _s();\n  const [allUsers, setAllUsers] = useState([]);\n  useEffect(() => {\n    const fetchAllUsers = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/user/all', {\n          withCredentials: true\n        });\n        setAllUsers(response.data);\n      } catch (error) {\n        console.error('Error fetching users:', error);\n      }\n    };\n    fetchAllUsers();\n  }, []);\n\n  // Fetch all friends and pending requests\n  useEffect(() => {\n    const fetchAllFriendsAndRequests = async () => {\n      try {\n        const friendsResponse = await axios.get('http://localhost:5000/friend/all', {\n          withCredentials: true\n        });\n        const pendingResponse = await axios.get('http://localhost:5000/friend/pending', {\n          withCredentials: true\n        });\n        setAllFriends(friendsResponse.data.friends);\n        setPendingRequests(pendingResponse.data.requests);\n      } catch (error) {\n        console.error('Error fetching friends or pending requests:', error);\n      }\n    };\n    fetchAllFriendsAndRequests();\n  }, []);\n\n  // Function to send friend request\n  // const handleSendRequest=async ( userId ) => {\n  //     try {\n  //         const response=await axios.post( `http://localhost:5000/friend/req/${ userId }`, null, { withCredentials: true } );\n  //         console.log( 'Friend request sent:', response.data );\n  //         // You may update state or UI as needed after sending the request\n  //     } catch ( error ) {\n  //         console.error( 'Error sending friend request:', error );\n  //     }\n  // };\n\n  // // Function to accept pending friend request\n  // const handleAcceptRequest=async ( requestId ) => {\n  //     try {\n  //         const response=await axios.put( `http://localhost:5000/friend/accept/${ requestId }`, null, { withCredentials: true } );\n  //         console.log( 'Friend request accepted:', response.data );\n  //         // You may update state or UI as needed after accepting the request\n  //     } catch ( error ) {\n  //         console.error( 'Error accepting friend request:', error );\n  //     }\n  // };\n\n  // // Function to check if a user is already a friend\n  // const isFriend=( userId ) => {\n  //     return allFriends.some( ( friend ) => friend._id===userId );\n  // };\n\n  // // Function to check if a user has pending request\n  // const isPendingRequest=( userId ) => {\n  //     return pendingRequests.some( ( request ) => request.sender===userId );\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"friend-container\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 70,\n    columnNumber: 9\n  }, this);\n};\n_s(FriendComponent, \"1XsOH0TALuGgA7zQl5HZXvbLbSw=\");\n_c = FriendComponent;\nexport default FriendComponent;\nvar _c;\n$RefreshReg$(_c, \"FriendComponent\");","map":{"version":3,"names":["React","useEffect","useState","axios","jsxDEV","_jsxDEV","FriendComponent","_s","allUsers","setAllUsers","fetchAllUsers","response","get","withCredentials","data","error","console","fetchAllFriendsAndRequests","friendsResponse","pendingResponse","setAllFriends","friends","setPendingRequests","requests","className","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/May2024-projects/react-client/src/Component/Friend.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './Friend.css'\r\nconst FriendComponent=() => {\r\n    const [allUsers, setAllUsers]=useState( [] );\r\n\r\n    useEffect( () => {\r\n        const fetchAllUsers=async () => {\r\n            try {\r\n                const response=await axios.get( 'http://localhost:5000/user/all', { withCredentials: true } );\r\n                setAllUsers( response.data );\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching users:', error );\r\n            }\r\n        };\r\n\r\n        fetchAllUsers();\r\n    }, [] );\r\n\r\n    // Fetch all friends and pending requests\r\n    useEffect( () => {\r\n        const fetchAllFriendsAndRequests=async () => {\r\n            try {\r\n                const friendsResponse=await axios.get( 'http://localhost:5000/friend/all', { withCredentials: true } );\r\n                const pendingResponse=await axios.get( 'http://localhost:5000/friend/pending', { withCredentials: true } );\r\n\r\n                setAllFriends( friendsResponse.data.friends );\r\n                setPendingRequests( pendingResponse.data.requests );\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching friends or pending requests:', error );\r\n            }\r\n        };\r\n\r\n        fetchAllFriendsAndRequests();\r\n    }, [] );\r\n\r\n    // Function to send friend request\r\n    // const handleSendRequest=async ( userId ) => {\r\n    //     try {\r\n    //         const response=await axios.post( `http://localhost:5000/friend/req/${ userId }`, null, { withCredentials: true } );\r\n    //         console.log( 'Friend request sent:', response.data );\r\n    //         // You may update state or UI as needed after sending the request\r\n    //     } catch ( error ) {\r\n    //         console.error( 'Error sending friend request:', error );\r\n    //     }\r\n    // };\r\n\r\n    // // Function to accept pending friend request\r\n    // const handleAcceptRequest=async ( requestId ) => {\r\n    //     try {\r\n    //         const response=await axios.put( `http://localhost:5000/friend/accept/${ requestId }`, null, { withCredentials: true } );\r\n    //         console.log( 'Friend request accepted:', response.data );\r\n    //         // You may update state or UI as needed after accepting the request\r\n    //     } catch ( error ) {\r\n    //         console.error( 'Error accepting friend request:', error );\r\n    //     }\r\n    // };\r\n\r\n    // // Function to check if a user is already a friend\r\n    // const isFriend=( userId ) => {\r\n    //     return allFriends.some( ( friend ) => friend._id===userId );\r\n    // };\r\n\r\n    // // Function to check if a user has pending request\r\n    // const isPendingRequest=( userId ) => {\r\n    //     return pendingRequests.some( ( request ) => request.sender===userId );\r\n    // };\r\n\r\n    return (\r\n        <div className=\"friend-container\">\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendComponent;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAO,cAAc;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACrB,MAAMC,eAAe,GAACA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAACP,QAAQ,CAAE,EAAG,CAAC;EAE5CD,SAAS,CAAE,MAAM;IACb,MAAMS,aAAa,GAAC,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACA,MAAMC,QAAQ,GAAC,MAAMR,KAAK,CAACS,GAAG,CAAE,gCAAgC,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAE,CAAC;QAC7FJ,WAAW,CAAEE,QAAQ,CAACG,IAAK,CAAC;MAChC,CAAC,CAAC,OAAQC,KAAK,EAAG;QACdC,OAAO,CAACD,KAAK,CAAE,uBAAuB,EAAEA,KAAM,CAAC;MACnD;IACJ,CAAC;IAEDL,aAAa,CAAC,CAAC;EACnB,CAAC,EAAE,EAAG,CAAC;;EAEP;EACAT,SAAS,CAAE,MAAM;IACb,MAAMgB,0BAA0B,GAAC,MAAAA,CAAA,KAAY;MACzC,IAAI;QACA,MAAMC,eAAe,GAAC,MAAMf,KAAK,CAACS,GAAG,CAAE,kCAAkC,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAE,CAAC;QACtG,MAAMM,eAAe,GAAC,MAAMhB,KAAK,CAACS,GAAG,CAAE,sCAAsC,EAAE;UAAEC,eAAe,EAAE;QAAK,CAAE,CAAC;QAE1GO,aAAa,CAAEF,eAAe,CAACJ,IAAI,CAACO,OAAQ,CAAC;QAC7CC,kBAAkB,CAAEH,eAAe,CAACL,IAAI,CAACS,QAAS,CAAC;MACvD,CAAC,CAAC,OAAQR,KAAK,EAAG;QACdC,OAAO,CAACD,KAAK,CAAE,6CAA6C,EAAEA,KAAM,CAAC;MACzE;IACJ,CAAC;IAEDE,0BAA0B,CAAC,CAAC;EAChC,CAAC,EAAE,EAAG,CAAC;;EAEP;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,oBACIZ,OAAA;IAAKmB,SAAS,EAAC;EAAkB;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAE5B,CAAC;AAEd,CAAC;AAACrB,EAAA,CAtEID,eAAe;AAAAuB,EAAA,GAAfvB,eAAe;AAwErB,eAAeA,eAAe;AAAC,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}