{"ast":null,"code":"import React,{useEffect,useState}from'react';import'./Friend.css';import Friend2 from'./Friend2';import Navbar from'./Navbar';import{baseurl}from'../url';import axiosInstance from'../axiosConfig';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const FriendComponent=()=>{const[session,setSession]=useState(null);// Use null for initial state\nconst[allUsers,setAllUsers]=useState([]);// To store all users\nconst[receivedRequests,setReceivedRequests]=useState([]);// To store received friend requests\nconst[sentRequests,setSentRequests]=useState(new Set());// To track sent friend requests\nconst[loading,setLoading]=useState(true);// To manage loading state\nuseEffect(()=>{const fetchLoginUserId=async()=>{try{const response=await axiosInstance.get(\"\".concat(baseurl,\"/user/session\"),{withCredentials:true// Include credentials in the request\n});const data=response.data;console.log(data);setSession(data);}catch(error){console.error('Error fetching session data:',error);}};fetchLoginUserId();},[]);useEffect(()=>{const fetchAllUsers=async()=>{try{const response=await axiosInstance.get(\"\".concat(baseurl,\"/friend/unkownuser\"),{withCredentials:true// Include credentials in the request\n});const allUserData=response.data;console.log(allUserData);setAllUsers(allUserData);setLoading(false);}catch(error){console.error('Error fetching all users:',error);setLoading(false);}};fetchAllUsers();},[]);useEffect(()=>{const fetchReceivedRequests=async()=>{try{if(session){const response=await axiosInstance.get(\"\".concat(baseurl,\"/friend/recievedReq\"),{withCredentials:true});const requests=response.data;console.log('Received Requests:',requests);// Store received requests in localStorage\nlocalStorage.setItem('receivedRequests',JSON.stringify(requests));// Update received requests state\nsetReceivedRequests(requests);}}catch(error){console.error('Error fetching received friend requests:',error);}};fetchReceivedRequests();},[session]);const sendFriendRequest=async userId=>{try{if(session){const response=await axiosInstance.post(\"\".concat(baseurl,\"/friend/req/\").concat(userId),{},{withCredentials:true// Include credentials in the request\n});console.log('Friend request sent:',response.data);// Update sentRequests state immediately after sending request\nsetSentRequests(prev=>new Set(prev).add(userId));}else{console.error('User session not found');}}catch(error){console.error('Error sending friend request:',error);}};const acceptFriendRequest=async requestId=>{try{const response=await axiosInstance.post(\"\".concat(baseurl,\"/friend/pending/\").concat(requestId),{},{withCredentials:true});console.log('Friend request accepted:',response.data);// Remove the accepted request from the receivedRequests state\nsetReceivedRequests(prev=>prev.filter(request=>request._id!==requestId));window.location.reload();}catch(error){console.error('Error accepting friend request:',error);}};useEffect(()=>{// Load received requests from localStorage if available\nconst storedRequests=localStorage.getItem('receivedRequests');if(storedRequests){setReceivedRequests(JSON.parse(storedRequests));}},[]);const capitalizeFirstLetter=string=>{return string.charAt(0).toUpperCase()+string.slice(1);};return/*#__PURE__*/_jsxs(\"div\",{className:\"card-container\",children:[/*#__PURE__*/_jsx(Navbar,{}),/*#__PURE__*/_jsxs(\"div\",{className:\"friend-container\",children:[loading?/*#__PURE__*/_jsx(\"div\",{className:\"spinner\"}):session?/*#__PURE__*/_jsx(\"div\",{className:\"welcome-message\",children:/*#__PURE__*/_jsx(Friend2,{})}):/*#__PURE__*/_jsx(\"p\",{children:\"Loading session...\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"all-users\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"All Users\"}),/*#__PURE__*/_jsx(\"ul\",{children:allUsers.map(user=>/*#__PURE__*/_jsxs(\"li\",{children:[capitalizeFirstLetter(user.username),/*#__PURE__*/_jsx(\"button\",{className:\"send-request-btn\",onClick:()=>sendFriendRequest(user._id),disabled:sentRequests.has(user._id),children:sentRequests.has(user._id)?'Req Sent':'Send Req'})]},user._id))})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"received-requests\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Received Friend Requests\"}),/*#__PURE__*/_jsx(\"ul\",{children:receivedRequests.map(request=>/*#__PURE__*/_jsxs(\"li\",{children:[/*#__PURE__*/_jsxs(\"span\",{className:\"request-from\",children:[\"Request from: \",request.senderName,\" (\",request.senderEmail,\")\"]}),/*#__PURE__*/_jsx(\"button\",{className:\"accept-request-btn\",onClick:()=>acceptFriendRequest(request._id),children:\"Accept Request\"})]},request._id))})]})]})]});};export default FriendComponent;","map":{"version":3,"names":["React","useEffect","useState","Friend2","Navbar","baseurl","axiosInstance","jsx","_jsx","jsxs","_jsxs","FriendComponent","session","setSession","allUsers","setAllUsers","receivedRequests","setReceivedRequests","sentRequests","setSentRequests","Set","loading","setLoading","fetchLoginUserId","response","get","concat","withCredentials","data","console","log","error","fetchAllUsers","allUserData","fetchReceivedRequests","requests","localStorage","setItem","JSON","stringify","sendFriendRequest","userId","post","prev","add","acceptFriendRequest","requestId","filter","request","_id","window","location","reload","storedRequests","getItem","parse","capitalizeFirstLetter","string","charAt","toUpperCase","slice","className","children","map","user","username","onClick","disabled","has","senderName","senderEmail"],"sources":["C:/Users/nithi/Downloads/NewProjects/react-client/src/Component/Friend.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './Friend.css';\r\nimport Friend2 from './Friend2';\r\nimport Navbar from './Navbar';\r\nimport { baseurl } from '../url';\r\nimport axiosInstance from '../axiosConfig';\r\n\r\nconst FriendComponent=() => {\r\n    const [session, setSession]=useState( null ); // Use null for initial state\r\n    const [allUsers, setAllUsers]=useState( [] ); // To store all users\r\n    const [receivedRequests, setReceivedRequests]=useState( [] ); // To store received friend requests\r\n    const [sentRequests, setSentRequests]=useState( new Set() ); // To track sent friend requests\r\n    const [loading, setLoading]=useState( true ); // To manage loading state\r\n\r\n    useEffect( () => {\r\n        const fetchLoginUserId=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/user/session`, {\r\n                    withCredentials: true, // Include credentials in the request\r\n                } );\r\n                const data=response.data;\r\n                console.log( data );\r\n                setSession( data );\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching session data:', error );\r\n            }\r\n        };\r\n\r\n        fetchLoginUserId();\r\n    }, [] );\r\n\r\n    useEffect( () => {\r\n        const fetchAllUsers=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/friend/unkownuser`, {\r\n                    withCredentials: true, // Include credentials in the request\r\n                } );\r\n                const allUserData=response.data;\r\n                console.log( allUserData );\r\n                setAllUsers( allUserData );\r\n                setLoading( false );\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching all users:', error );\r\n                setLoading( false );\r\n            }\r\n        };\r\n\r\n        fetchAllUsers();\r\n    }, [] );\r\n\r\n    useEffect( () => {\r\n        const fetchReceivedRequests=async () => {\r\n            try {\r\n                if ( session ) {\r\n                    const response=await axiosInstance.get( `${ baseurl }/friend/recievedReq`, {\r\n                        withCredentials: true,\r\n                    } );\r\n                    const requests=response.data;\r\n                    console.log( 'Received Requests:', requests );\r\n\r\n                    // Store received requests in localStorage\r\n                    localStorage.setItem( 'receivedRequests', JSON.stringify( requests ) );\r\n\r\n                    // Update received requests state\r\n                    setReceivedRequests( requests );\r\n                }\r\n            } catch ( error ) {\r\n                console.error( 'Error fetching received friend requests:', error );\r\n            }\r\n        };\r\n\r\n        fetchReceivedRequests();\r\n    }, [session] );\r\n\r\n    const sendFriendRequest=async ( userId ) => {\r\n        try {\r\n            if ( session ) {\r\n                const response=await axiosInstance.post(\r\n                    `${ baseurl }/friend/req/${ userId }`,\r\n                    {},\r\n                    {\r\n                        withCredentials: true, // Include credentials in the request\r\n                    }\r\n                );\r\n                console.log( 'Friend request sent:', response.data );\r\n\r\n                // Update sentRequests state immediately after sending request\r\n                setSentRequests( ( prev ) => new Set( prev ).add( userId ) );\r\n            } else {\r\n                console.error( 'User session not found' );\r\n            }\r\n        } catch ( error ) {\r\n            console.error( 'Error sending friend request:', error );\r\n        }\r\n    };\r\n\r\n    const acceptFriendRequest=async ( requestId ) => {\r\n        try {\r\n            const response=await axiosInstance.post(\r\n                `${ baseurl }/friend/pending/${ requestId }`,\r\n                {},\r\n                {\r\n                    withCredentials: true,\r\n                }\r\n            );\r\n            console.log( 'Friend request accepted:', response.data );\r\n            // Remove the accepted request from the receivedRequests state\r\n            setReceivedRequests( ( prev ) =>\r\n                prev.filter( ( request ) => request._id!==requestId )\r\n            );\r\n            window.location.reload();\r\n        } catch ( error ) {\r\n            console.error( 'Error accepting friend request:', error );\r\n        }\r\n    };\r\n\r\n    useEffect( () => {\r\n        // Load received requests from localStorage if available\r\n        const storedRequests=localStorage.getItem( 'receivedRequests' );\r\n        if ( storedRequests ) {\r\n            setReceivedRequests( JSON.parse( storedRequests ) );\r\n        }\r\n    }, [] );\r\n\r\n    const capitalizeFirstLetter=( string ) => {\r\n        return string.charAt( 0 ).toUpperCase()+string.slice( 1 );\r\n    };\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Navbar />\r\n            <div className=\"friend-container\">\r\n                {loading? (\r\n                    <div className=\"spinner\"></div>\r\n                ):session? (\r\n                    <div className=\"welcome-message\">\r\n                        <Friend2 />\r\n                    </div>\r\n                ):(\r\n                    <p>Loading session...</p>\r\n                )}\r\n                <div className=\"all-users\">\r\n                    <h2>All Users</h2>\r\n                    <ul>\r\n                        {allUsers.map( ( user ) => (\r\n                            <li key={user._id}>\r\n                                {capitalizeFirstLetter( user.username )}\r\n                                <button\r\n                                    className=\"send-request-btn\"\r\n                                    onClick={() => sendFriendRequest( user._id )}\r\n                                    disabled={sentRequests.has( user._id )}\r\n                                >\r\n                                    {sentRequests.has( user._id )? 'Req Sent':'Send Req'}\r\n                                </button>\r\n                            </li>\r\n                        ) )}\r\n                    </ul>\r\n                </div>\r\n                <div className=\"received-requests\">\r\n                    <h2>Received Friend Requests</h2>\r\n                    <ul>\r\n                        {receivedRequests.map( ( request ) => (\r\n                            <li key={request._id}>\r\n                                <span className=\"request-from\">\r\n                                    Request from: {request.senderName} ({request.senderEmail})\r\n                                </span>\r\n                                <button\r\n                                    className=\"accept-request-btn\"\r\n                                    onClick={() => acceptFriendRequest( request._id )}\r\n                                >\r\n                                    Accept Request\r\n                                </button>\r\n                            </li>\r\n                        ) )}\r\n                    </ul>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default FriendComponent;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}