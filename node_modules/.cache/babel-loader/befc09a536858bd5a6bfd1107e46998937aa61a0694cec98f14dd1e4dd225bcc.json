{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\nithi\\\\Downloads\\\\NewProjects\\\\react-client\\\\src\\\\Component\\\\Timeline.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Card from './Card';\nimport './Timeline.css';\nimport Navbar from './Navbar';\nimport { baseurl } from '../url';\nimport axiosInstance from '../axiosConfig';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst About = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  const [username, setUsername] = useState('');\n  useEffect(() => {\n    const fetchUserPosts = async () => {\n      try {\n        const response = await axiosInstance.get(`${baseurl}/msg/all`, {\n          withCredentials: true // Ensure credentials are included\n        });\n        console.log(response);\n\n        // Check if response.data is an array and has at least one element\n        if (response.data && Array.isArray(response.data) && response.data.length > 0) {\n          setPosts(response.data[0].messagesList || []);\n          setUsername(response.data[0].username || 'Unknown');\n        } else {\n          console.error('Error: response data is not an array or is empty');\n        }\n      } catch (error) {\n        console.error('Error while fetching posts', error);\n      }\n    };\n    fetchUserPosts();\n  }, []); // Empty dependency array ensures useEffect runs only once\n\n  const formatDate = dateString => {\n    const options = {\n      year: 'numeric',\n      month: 'long',\n      day: 'numeric'\n    };\n    return new Date(dateString).toLocaleDateString(undefined, options);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"card-container\",\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Logged User's Posts Only\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), posts.length > 0 ? posts.map(message => /*#__PURE__*/_jsxDEV(Card, {\n      username: username.toUpperCase() // Using username for all posts\n      ,\n      userPost: message.userPost,\n      likes: message.likes,\n      disLikes: message.disLikes,\n      date: formatDate(message.date)\n    }, message._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 21\n    }, this)) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"No posts found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 9\n  }, this);\n};\n_s(About, \"eJc9pa762mFJ1UHyrLjdvpLiRy8=\");\n_c = About;\nexport default About;\nvar _c;\n$RefreshReg$(_c, \"About\");","map":{"version":3,"names":["React","useEffect","useState","Card","Navbar","baseurl","axiosInstance","jsxDEV","_jsxDEV","About","_s","posts","setPosts","username","setUsername","fetchUserPosts","response","get","withCredentials","console","log","data","Array","isArray","length","messagesList","error","formatDate","dateString","options","year","month","day","Date","toLocaleDateString","undefined","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","toUpperCase","userPost","likes","disLikes","date","_id","_c","$RefreshReg$"],"sources":["C:/Users/nithi/Downloads/NewProjects/react-client/src/Component/Timeline.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Card from './Card';\r\nimport './Timeline.css';\r\nimport Navbar from './Navbar';\r\nimport { baseurl } from '../url';\r\nimport axiosInstance from '../axiosConfig';\r\n\r\nconst About=() => {\r\n    const [posts, setPosts]=useState( [] );\r\n    const [username, setUsername]=useState( '' );\r\n\r\n    useEffect( () => {\r\n        const fetchUserPosts=async () => {\r\n            try {\r\n                const response=await axiosInstance.get( `${ baseurl }/msg/all`, {\r\n                    withCredentials: true // Ensure credentials are included\r\n                } );\r\n                console.log( response );\r\n\r\n                // Check if response.data is an array and has at least one element\r\n                if ( response.data&&Array.isArray( response.data )&&response.data.length>0 ) {\r\n                    setPosts( response.data[0].messagesList||[] );\r\n                    setUsername( response.data[0].username||'Unknown' );\r\n                } else {\r\n                    console.error( 'Error: response data is not an array or is empty' );\r\n                }\r\n            } catch ( error ) {\r\n                console.error( 'Error while fetching posts', error );\r\n            }\r\n        };\r\n\r\n        fetchUserPosts();\r\n    }, [] ); // Empty dependency array ensures useEffect runs only once\r\n\r\n    const formatDate=( dateString ) => {\r\n        const options={ year: 'numeric', month: 'long', day: 'numeric' };\r\n        return new Date( dateString ).toLocaleDateString( undefined, options );\r\n    };\r\n\r\n    return (\r\n        <div className=\"card-container\">\r\n            <Navbar />\r\n            <h2>Logged User's Posts Only</h2>\r\n            {posts.length>0? (\r\n                posts.map( message => (\r\n                    <Card\r\n                        key={message._id}\r\n                        username={username.toUpperCase()} // Using username for all posts\r\n                        userPost={message.userPost}\r\n                        likes={message.likes}\r\n                        disLikes={message.disLikes}\r\n                        date={formatDate( message.date )}\r\n                    />\r\n                ) )\r\n            ):(\r\n                <div>No posts found</div>\r\n            )}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default About;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}